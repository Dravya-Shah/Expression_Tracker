{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dravya\\\\Expression Tracker(Leela)\\\\Expression_Tracker\\\\client\\\\src\\\\components\\\\AdminApp\\\\AdminApp.js\",\n  _s = $RefreshSig$();\n// // import React, { useState, useEffect } from 'react';\n\n// // function AdminApp() {\n// //   const [sessions, setSessions] = useState([]);\n// //   const [selectedSession, setSelectedSession] = useState(null);\n// //   const [analysisData, setAnalysisData] = useState(null);\n\n// //   useEffect(() => {\n// //     fetchSessions();\n// //   }, []);\n\n// //   const fetchSessions = async () => {\n// //     try {\n// //       const response = await fetch('http://localhost:5000/sessions');\n// //       if (!response.ok) {\n// //         throw new Error('Network response was not ok');\n// //       }\n// //       const data = await response.json();\n// //       setSessions(data.sessions);\n// //     } catch (error) {\n// //       console.error('Error fetching sessions:', error);\n// //     }\n// //   };\n\n// //   const handleSessionClick = async (sessionId) => {\n// //     setSelectedSession(sessionId);\n// //     try {\n// //       const response = await fetch(`http://localhost:5000/analyze/${sessionId}`);\n// //       if (!response.ok) {\n// //         throw new Error('Network response was not ok');\n// //       }\n// //       const data = await response.json();\n// //       console.log(\"Received analysis data:\", data); // Add this line for debugging\n// //       setAnalysisData(data);\n// //     } catch (error) {\n// //       console.error('Error analyzing session:', error);\n// //     }\n// //   };\n\n// //   const renderBarChart = () => {\n// //     if (!analysisData || !analysisData.overallAnalysis) return null;\n\n// //     const emotions = analysisData.overallAnalysis.emotions;\n// //     const maxValue = Math.max(...Object.values(emotions).map(v => parseFloat(v)));\n\n// //     return (\n// //       <div style={{ width: '100%', maxWidth: '600px', margin: '20px auto' }}>\n// //         <h3>Overall Emotion Analysis</h3>\n// //         <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\n// //           {Object.entries(emotions).map(([emotion, value]) => (\n// //             <div key={emotion} style={{ display: 'flex', alignItems: 'center' }}>\n// //               <div style={{ width: '100px', textAlign: 'right', marginRight: '10px' }}>{emotion}</div>\n// //               <div style={{ flex: 1, backgroundColor: '#f0f0f0', height: '20px' }}>\n// //                 <div\n// //                   style={{\n// //                     width: `${(parseFloat(value) / maxValue) * 100}%`,\n// //                     backgroundColor: '#0088FE',\n// //                     height: '100%',\n// //                     display: 'flex',\n// //                     alignItems: 'center',\n// //                     paddingLeft: '5px',\n// //                     color: 'white',\n// //                     fontSize: '12px'\n// //                   }}\n// //                 >\n// //                   {parseFloat(value).toFixed(2)}%\n// //                 </div>\n// //               </div>\n// //             </div>\n// //           ))}\n// //         </div>\n// //       </div>\n// //     );\n// //   };\n\n// //   return (\n// //     <div style={{ padding: '20px' }}>\n// //       <h2>Admin Dashboard</h2>\n// //       <div style={{ display: 'flex' }}>\n// //         <div style={{ width: '30%', marginRight: '20px' }}>\n// //           <h3>Sessions</h3>\n// //           <ul style={{ listStyleType: 'none', padding: 0 }}>\n// //             {sessions.map((session) => (\n// //               <li \n// //                 key={session} \n// //                 onClick={() => handleSessionClick(session)}\n// //                 style={{ cursor: 'pointer', padding: '10px', border: '1px solid #ddd', marginBottom: '5px' }}\n// //               >\n// //                 {session}\n// //               </li>\n// //             ))}\n// //           </ul>\n// //         </div>\n// //         {selectedSession && analysisData && (\n// //           <div style={{ width: '70%' }}>\n// //             <h3>Analysis for Session: {selectedSession}</h3>\n// //             {renderBarChart()}\n// //             <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n// //               {analysisData.imageAnalyses.map((analysis, index) => (\n// //                 <div key={index} style={{ margin: '10px', textAlign: 'center' }}>\n// //                   <img \n// //                     src={`http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`} \n// //                     alt={`Webcam ${index}`} \n// //                     style={{ width: '200px', height: 'auto' }}\n// //                   />\n// //                   <div>\n// //                     {Object.entries(analysis.emotions).map(([emotion, value]) => (\n// //                       <p key={emotion}>{emotion}: {parseFloat(value).toFixed(2)}%</p>\n// //                     ))}\n// //                   </div>\n// //                 </div>\n// //               ))}\n// //             </div>\n// //           </div>\n// //         )}\n// //       </div>\n// //     </div>\n// //   );\n// // }\n\n// // export default AdminApp;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminApp() {\n  _s();\n  const [sessions, setSessions] = useState([]);\n  const [selectedSession, setSelectedSession] = useState(null);\n  const [analysisData, setAnalysisData] = useState(null);\n  useEffect(() => {\n    fetchSessions();\n  }, []);\n  const fetchSessions = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/sessions');\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setSessions(data.sessions);\n    } catch (error) {\n      console.error('Error fetching sessions:', error);\n    }\n  };\n  const handleSessionClick = async sessionId => {\n    setSelectedSession(sessionId);\n    try {\n      const response = await fetch(`http://localhost:5000/analyze/${sessionId}`);\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      console.log(\"Received analysis data:\", data); // Add this line for debugging\n      setAnalysisData(data);\n    } catch (error) {\n      console.error('Error analyzing session:', error);\n    }\n  };\n  const renderBarChart = () => {\n    if (!analysisData || !analysisData.overallAnalysis) return null;\n    const emotions = analysisData.overallAnalysis.emotions;\n    const maxValue = Math.max(...Object.values(emotions).map(v => parseFloat(v)));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        maxWidth: '600px',\n        margin: '20px auto'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Overall Emotion Analysis\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          gap: '10px'\n        },\n        children: Object.entries(emotions).map(([emotion, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '100px',\n              textAlign: 'right',\n              marginRight: '10px'\n            },\n            children: emotion\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              flex: 1,\n              backgroundColor: '#f0f0f0',\n              height: '20px'\n            },\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                width: `${parseFloat(value) / maxValue * 100}%`,\n                backgroundColor: '#0088FE',\n                height: '100%',\n                display: 'flex',\n                alignItems: 'center',\n                paddingLeft: '5px',\n                color: 'white',\n                fontSize: '12px'\n              },\n              children: [parseFloat(value).toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)]\n        }, emotion, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Admin Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '30%',\n          marginRight: '20px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Sessions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          border: \"1\",\n          cellPadding: \"10\",\n          style: {\n            width: '100%',\n            textAlign: 'left'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Session ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: sessions.map(session => /*#__PURE__*/_jsxDEV(\"tr\", {\n              onClick: () => handleSessionClick(session),\n              style: {\n                cursor: 'pointer'\n              },\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                children: session\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 19\n              }, this)\n            }, session, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), selectedSession && analysisData && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '70%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Analysis for Session: \", selectedSession]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this), renderBarChart(), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap'\n          },\n          children: analysisData.imageAnalyses.map((analysis, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              margin: '10px',\n              textAlign: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: `http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`,\n              alt: `Webcam ${index}`,\n              style: {\n                width: '200px',\n                height: 'auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: Object.entries(analysis.emotions).map(([emotion, value]) => /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [emotion, \": \", parseFloat(value).toFixed(2), \"%\"]\n              }, emotion, true, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminApp, \"8K1xWV7/NtmTldeCFxSL+RxVSYg=\");\n_c = AdminApp;\nexport default AdminApp;\n// import React, { useState, useEffect } from 'react';\n// import { Pie } from 'react-chartjs-2'; // Changed Bar to Pie component\n// import 'chart.js/auto'; // Import auto to handle chart.js registration\n\n// function AdminApp() {\n//   const [sessions, setSessions] = useState([]);\n//   const [selectedSession, setSelectedSession] = useState(null);\n//   const [analysisData, setAnalysisData] = useState(null);\n\n//   useEffect(() => {\n//     fetchSessions();\n//   }, []);\n\n//   const fetchSessions = async () => {\n//     try {\n//       const response = await fetch('http://localhost:5000/sessions');\n//       if (!response.ok) {\n//         throw new Error('Network response was not ok');\n//       }\n//       const data = await response.json();\n//       setSessions(data.sessions);\n//     } catch (error) {\n//       console.error('Error fetching sessions:', error);\n//     }\n//   };\n\n//   const handleSessionClick = async (sessionId) => {\n//     setSelectedSession(sessionId);\n//     try {\n//       const response = await fetch(`http://localhost:5000/analyze/${sessionId}`);\n//       if (!response.ok) {\n//         throw new Error('Network response was not ok');\n//       }\n//       const data = await response.json();\n//       setAnalysisData(data);\n//     } catch (error) {\n//       console.error('Error analyzing session:', error);\n//     }\n//   };\n\n//   const handleBackToSessions = () => {\n//     setSelectedSession(null);\n//     setAnalysisData(null);\n//   };\n\n//   const renderTable = () => {\n//     if (!analysisData || !analysisData.imageAnalyses) return null;\n\n//     return (\n//       <div style={{ overflowX: 'auto', marginTop: '20px' }}> {/* Enable horizontal scrolling */}\n//         <table style={{ width: '100%', borderCollapse: 'collapse', border: '1px solid #ddd' }}>\n//           <thead>\n//             <tr>\n//               <th style={{ border: '1px solid #ddd', padding: '12px', backgroundColor: '#f2f2f2', textAlign: 'center' }}>Webcam Capture</th>\n//               <th style={{ border: '1px solid #ddd', padding: '12px', backgroundColor: '#f2f2f2', textAlign: 'center' }}>Game Screenshot</th>\n//               <th style={{ border: '1px solid #ddd', padding: '12px', backgroundColor: '#f2f2f2', textAlign: 'center' }}>Analysis</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {analysisData.imageAnalyses.map((analysis, index) => (\n//               <tr key={index} style={{ borderBottom: '1px solid #ddd' }}>\n//                 <td style={{ border: '1px solid #ddd', padding: '12px', textAlign: 'center' }}>\n//                   <img \n//                     src={`http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`} \n//                     srcSet={`http://localhost:5000/uploads/webcam_images/${selectedSession}/small/${analysis.imagePath} 200w,\n//                              http://localhost:5000/uploads/webcam_images/${selectedSession}/medium/${analysis.imagePath} 400w,\n//                              http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath} 800w`}\n//                     sizes=\"(max-width: 400px) 200px, (max-width: 800px) 400px, 800px\"\n//                     alt={`Webcam ${index}`} \n//                     style={{ width: '100%', height: 'auto', borderRadius: '5px' }}\n//                     loading=\"lazy\" \n//                   />\n//                 </td>\n\n//                 <td style={{ border: '1px solid #ddd', padding: '12px', textAlign: 'center' }}>\n//                   <img \n//                     src={`http://localhost:5000/uploads/game_screenshots/${selectedSession}/screenshot_${index}.png`} \n//                     srcSet={`http://localhost:5000/uploads/game_screenshots/${selectedSession}/small/screenshot_${index}.png 200w,\n//                              http://localhost:5000/uploads/game_screenshots/${selectedSession}/medium/screenshot_${index}.png 400w,\n//                              http://localhost:5000/uploads/game_screenshots/${selectedSession}/screenshot_${index}.png 800w`}\n//                     sizes=\"(max-width: 400px) 200px, (max-width: 800px) 400px, 800px\"\n//                     alt={`Game Screenshot ${index}`} \n//                     style={{ width: '100%', height: 'auto', borderRadius: '5px' }}\n//                     loading=\"lazy\" \n//                   />\n//                 </td>\n\n//                 <td style={{ border: '1px solid #ddd', padding: '12px' }}>\n//                   {Object.entries(analysis.emotions).map(([emotion, value]) => (\n//                     <p key={emotion} style={{ margin: '5px 0' }}>{emotion}: {parseFloat(value).toFixed(2)}%</p>\n//                   ))}\n//                 </td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       </div>\n//     );\n//   };\n\n//   const renderPieChart = () => {\n//     if (!analysisData || !analysisData.overallAnalysis) return null;\n\n//     const emotions = analysisData.overallAnalysis.emotions;\n//     const data = {\n//       labels: Object.keys(emotions),\n//       datasets: [{\n//         label: 'Emotion Analysis (%)',\n//         data: Object.values(emotions).map(v => parseFloat(v)),\n//         backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\n//       }]\n//     };\n\n//     const options = {\n//       responsive: true,\n//       plugins: {\n//         legend: {\n//           position: 'top',\n//         },\n//       },\n//     };\n\n//     return (\n//       <div style={{ width: '60%', margin: '0 auto' }}>\n//         <h3 style={{ textAlign: 'center' }}>Overall Emotion Analysis</h3>\n//         <Pie data={data} options={options} />\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div style={{ padding: '20px', maxHeight: '100vh', overflowY: 'auto' }}> {/* Added maxHeight and overflowY */}\n//       <h2>Admin Dashboard</h2>\n\n//       {/* Pie Chart for Overall Emotion Analysis */}\n//       {renderPieChart()}\n\n//       <div style={{ display: 'flex', marginTop: '40px' }}>\n//         {selectedSession ? (\n//           <div style={{ width: '100%' }}>\n//             <h3>Analysis for Session: {selectedSession}</h3>\n//             {renderTable()}\n\n//             {/* Back to Sessions Button */}\n//             <button \n//               onClick={handleBackToSessions} \n//               style={{\n//                 backgroundColor: '#A2C2E2', // Pastel blue color\n//                 color: '#fff',\n//                 padding: '10px 15px',\n//                 border: 'none',\n//                 borderRadius: '5px',\n//                 cursor: 'pointer',\n//                 marginTop: '20px',\n//                 display: 'block',\n//                 marginLeft: 'auto',\n//                 marginRight: 'auto'\n//               }}\n//             >\n//               Back to Sessions\n//             </button>\n//           </div>\n//         ) : (\n//           <div style={{ width: '30%', marginRight: '20px' }}>\n//             <h3>Sessions</h3>\n//             <ul style={{ listStyleType: 'none', padding: 0 }}>\n//               {sessions.map((session) => (\n//                 <li \n//                   key={session} \n//                   onClick={() => handleSessionClick(session)}\n//                   style={{ cursor: 'pointer', padding: '10px', border: '1px solid #ddd', marginBottom: '5px' }}\n//                 >\n//                   {session}\n//                 </li>\n//               ))}\n//             </ul>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AdminApp;\nvar _c;\n$RefreshReg$(_c, \"AdminApp\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","AdminApp","_s","sessions","setSessions","selectedSession","setSelectedSession","analysisData","setAnalysisData","fetchSessions","response","fetch","ok","Error","data","json","error","console","handleSessionClick","sessionId","log","renderBarChart","overallAnalysis","emotions","maxValue","Math","max","Object","values","map","v","parseFloat","style","width","maxWidth","margin","children","fileName","_jsxFileName","lineNumber","columnNumber","display","flexDirection","gap","entries","emotion","value","alignItems","textAlign","marginRight","flex","backgroundColor","height","paddingLeft","color","fontSize","toFixed","padding","border","cellPadding","session","onClick","cursor","flexWrap","imageAnalyses","analysis","index","src","imagePath","alt","_c","$RefreshReg$"],"sources":["C:/Users/Dravya/Expression Tracker(Leela)/Expression_Tracker/client/src/components/AdminApp/AdminApp.js"],"sourcesContent":["// // import React, { useState, useEffect } from 'react';\r\n\r\n// // function AdminApp() {\r\n// //   const [sessions, setSessions] = useState([]);\r\n// //   const [selectedSession, setSelectedSession] = useState(null);\r\n// //   const [analysisData, setAnalysisData] = useState(null);\r\n\r\n// //   useEffect(() => {\r\n// //     fetchSessions();\r\n// //   }, []);\r\n\r\n// //   const fetchSessions = async () => {\r\n// //     try {\r\n// //       const response = await fetch('http://localhost:5000/sessions');\r\n// //       if (!response.ok) {\r\n// //         throw new Error('Network response was not ok');\r\n// //       }\r\n// //       const data = await response.json();\r\n// //       setSessions(data.sessions);\r\n// //     } catch (error) {\r\n// //       console.error('Error fetching sessions:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const handleSessionClick = async (sessionId) => {\r\n// //     setSelectedSession(sessionId);\r\n// //     try {\r\n// //       const response = await fetch(`http://localhost:5000/analyze/${sessionId}`);\r\n// //       if (!response.ok) {\r\n// //         throw new Error('Network response was not ok');\r\n// //       }\r\n// //       const data = await response.json();\r\n// //       console.log(\"Received analysis data:\", data); // Add this line for debugging\r\n// //       setAnalysisData(data);\r\n// //     } catch (error) {\r\n// //       console.error('Error analyzing session:', error);\r\n// //     }\r\n// //   };\r\n\r\n// //   const renderBarChart = () => {\r\n// //     if (!analysisData || !analysisData.overallAnalysis) return null;\r\n\r\n// //     const emotions = analysisData.overallAnalysis.emotions;\r\n// //     const maxValue = Math.max(...Object.values(emotions).map(v => parseFloat(v)));\r\n\r\n// //     return (\r\n// //       <div style={{ width: '100%', maxWidth: '600px', margin: '20px auto' }}>\r\n// //         <h3>Overall Emotion Analysis</h3>\r\n// //         <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n// //           {Object.entries(emotions).map(([emotion, value]) => (\r\n// //             <div key={emotion} style={{ display: 'flex', alignItems: 'center' }}>\r\n// //               <div style={{ width: '100px', textAlign: 'right', marginRight: '10px' }}>{emotion}</div>\r\n// //               <div style={{ flex: 1, backgroundColor: '#f0f0f0', height: '20px' }}>\r\n// //                 <div\r\n// //                   style={{\r\n// //                     width: `${(parseFloat(value) / maxValue) * 100}%`,\r\n// //                     backgroundColor: '#0088FE',\r\n// //                     height: '100%',\r\n// //                     display: 'flex',\r\n// //                     alignItems: 'center',\r\n// //                     paddingLeft: '5px',\r\n// //                     color: 'white',\r\n// //                     fontSize: '12px'\r\n// //                   }}\r\n// //                 >\r\n// //                   {parseFloat(value).toFixed(2)}%\r\n// //                 </div>\r\n// //               </div>\r\n// //             </div>\r\n// //           ))}\r\n// //         </div>\r\n// //       </div>\r\n// //     );\r\n// //   };\r\n\r\n// //   return (\r\n// //     <div style={{ padding: '20px' }}>\r\n// //       <h2>Admin Dashboard</h2>\r\n// //       <div style={{ display: 'flex' }}>\r\n// //         <div style={{ width: '30%', marginRight: '20px' }}>\r\n// //           <h3>Sessions</h3>\r\n// //           <ul style={{ listStyleType: 'none', padding: 0 }}>\r\n// //             {sessions.map((session) => (\r\n// //               <li \r\n// //                 key={session} \r\n// //                 onClick={() => handleSessionClick(session)}\r\n// //                 style={{ cursor: 'pointer', padding: '10px', border: '1px solid #ddd', marginBottom: '5px' }}\r\n// //               >\r\n// //                 {session}\r\n// //               </li>\r\n// //             ))}\r\n// //           </ul>\r\n// //         </div>\r\n// //         {selectedSession && analysisData && (\r\n// //           <div style={{ width: '70%' }}>\r\n// //             <h3>Analysis for Session: {selectedSession}</h3>\r\n// //             {renderBarChart()}\r\n// //             <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n// //               {analysisData.imageAnalyses.map((analysis, index) => (\r\n// //                 <div key={index} style={{ margin: '10px', textAlign: 'center' }}>\r\n// //                   <img \r\n// //                     src={`http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`} \r\n// //                     alt={`Webcam ${index}`} \r\n// //                     style={{ width: '200px', height: 'auto' }}\r\n// //                   />\r\n// //                   <div>\r\n// //                     {Object.entries(analysis.emotions).map(([emotion, value]) => (\r\n// //                       <p key={emotion}>{emotion}: {parseFloat(value).toFixed(2)}%</p>\r\n// //                     ))}\r\n// //                   </div>\r\n// //                 </div>\r\n// //               ))}\r\n// //             </div>\r\n// //           </div>\r\n// //         )}\r\n// //       </div>\r\n// //     </div>\r\n// //   );\r\n// // }\r\n\r\n// // export default AdminApp;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction AdminApp() {\r\n  const [sessions, setSessions] = useState([]);\r\n  const [selectedSession, setSelectedSession] = useState(null);\r\n  const [analysisData, setAnalysisData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchSessions();\r\n  }, []);\r\n\r\n  const fetchSessions = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/sessions');\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      setSessions(data.sessions);\r\n    } catch (error) {\r\n      console.error('Error fetching sessions:', error);\r\n    }\r\n  };\r\n\r\n  const handleSessionClick = async (sessionId) => {\r\n    setSelectedSession(sessionId);\r\n    try {\r\n      const response = await fetch(`http://localhost:5000/analyze/${sessionId}`);\r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n      const data = await response.json();\r\n      console.log(\"Received analysis data:\", data); // Add this line for debugging\r\n      setAnalysisData(data);\r\n    } catch (error) {\r\n      console.error('Error analyzing session:', error);\r\n    }\r\n  };\r\n\r\n  const renderBarChart = () => {\r\n    if (!analysisData || !analysisData.overallAnalysis) return null;\r\n\r\n    const emotions = analysisData.overallAnalysis.emotions;\r\n    const maxValue = Math.max(...Object.values(emotions).map(v => parseFloat(v)));\r\n\r\n    return (\r\n      <div style={{ width: '100%', maxWidth: '600px', margin: '20px auto' }}>\r\n        <h3>Overall Emotion Analysis</h3>\r\n        <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>\r\n          {Object.entries(emotions).map(([emotion, value]) => (\r\n            <div key={emotion} style={{ display: 'flex', alignItems: 'center' }}>\r\n              <div style={{ width: '100px', textAlign: 'right', marginRight: '10px' }}>{emotion}</div>\r\n              <div style={{ flex: 1, backgroundColor: '#f0f0f0', height: '20px' }}>\r\n                <div\r\n                  style={{\r\n                    width: `${(parseFloat(value) / maxValue) * 100}%`,\r\n                    backgroundColor: '#0088FE',\r\n                    height: '100%',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    paddingLeft: '5px',\r\n                    color: 'white',\r\n                    fontSize: '12px'\r\n                  }}\r\n                >\r\n                  {parseFloat(value).toFixed(2)}%\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>Admin Dashboard</h2>\r\n      <div style={{ display: 'flex' }}>\r\n        {/* Session Table */}\r\n        <div style={{ width: '30%', marginRight: '20px' }}>\r\n          <h3>Sessions</h3>\r\n          {/* Tabular Display for Sessions */}\r\n          <table border=\"1\" cellPadding=\"10\" style={{ width: '100%', textAlign: 'left' }}>\r\n            <thead>\r\n              <tr>\r\n                <th>Session ID</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {sessions.map((session) => (\r\n                <tr key={session} onClick={() => handleSessionClick(session)} style={{ cursor: 'pointer' }}>\r\n                  <td>{session}</td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n\r\n        {/* Session Analysis Section */}\r\n        {selectedSession && analysisData && (\r\n          <div style={{ width: '70%' }}>\r\n            <h3>Analysis for Session: {selectedSession}</h3>\r\n            {renderBarChart()}\r\n            <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n              {analysisData.imageAnalyses.map((analysis, index) => (\r\n                <div key={index} style={{ margin: '10px', textAlign: 'center' }}>\r\n                  <img \r\n                    src={`http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`} \r\n                    alt={`Webcam ${index}`} \r\n                    style={{ width: '200px', height: 'auto' }}\r\n                  />\r\n                  <div>\r\n                    {Object.entries(analysis.emotions).map(([emotion, value]) => (\r\n                      <p key={emotion}>{emotion}: {parseFloat(value).toFixed(2)}%</p>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminApp;\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Pie } from 'react-chartjs-2'; // Changed Bar to Pie component\r\n// import 'chart.js/auto'; // Import auto to handle chart.js registration\r\n\r\n// function AdminApp() {\r\n//   const [sessions, setSessions] = useState([]);\r\n//   const [selectedSession, setSelectedSession] = useState(null);\r\n//   const [analysisData, setAnalysisData] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     fetchSessions();\r\n//   }, []);\r\n\r\n//   const fetchSessions = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:5000/sessions');\r\n//       if (!response.ok) {\r\n//         throw new Error('Network response was not ok');\r\n//       }\r\n//       const data = await response.json();\r\n//       setSessions(data.sessions);\r\n//     } catch (error) {\r\n//       console.error('Error fetching sessions:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleSessionClick = async (sessionId) => {\r\n//     setSelectedSession(sessionId);\r\n//     try {\r\n//       const response = await fetch(`http://localhost:5000/analyze/${sessionId}`);\r\n//       if (!response.ok) {\r\n//         throw new Error('Network response was not ok');\r\n//       }\r\n//       const data = await response.json();\r\n//       setAnalysisData(data);\r\n//     } catch (error) {\r\n//       console.error('Error analyzing session:', error);\r\n//     }\r\n//   };\r\n\r\n//   const handleBackToSessions = () => {\r\n//     setSelectedSession(null);\r\n//     setAnalysisData(null);\r\n//   };\r\n\r\n//   const renderTable = () => {\r\n//     if (!analysisData || !analysisData.imageAnalyses) return null;\r\n\r\n//     return (\r\n//       <div style={{ overflowX: 'auto', marginTop: '20px' }}> {/* Enable horizontal scrolling */}\r\n//         <table style={{ width: '100%', borderCollapse: 'collapse', border: '1px solid #ddd' }}>\r\n//           <thead>\r\n//             <tr>\r\n//               <th style={{ border: '1px solid #ddd', padding: '12px', backgroundColor: '#f2f2f2', textAlign: 'center' }}>Webcam Capture</th>\r\n//               <th style={{ border: '1px solid #ddd', padding: '12px', backgroundColor: '#f2f2f2', textAlign: 'center' }}>Game Screenshot</th>\r\n//               <th style={{ border: '1px solid #ddd', padding: '12px', backgroundColor: '#f2f2f2', textAlign: 'center' }}>Analysis</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {analysisData.imageAnalyses.map((analysis, index) => (\r\n//               <tr key={index} style={{ borderBottom: '1px solid #ddd' }}>\r\n//                 <td style={{ border: '1px solid #ddd', padding: '12px', textAlign: 'center' }}>\r\n//                   <img \r\n//                     src={`http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath}`} \r\n//                     srcSet={`http://localhost:5000/uploads/webcam_images/${selectedSession}/small/${analysis.imagePath} 200w,\r\n//                              http://localhost:5000/uploads/webcam_images/${selectedSession}/medium/${analysis.imagePath} 400w,\r\n//                              http://localhost:5000/uploads/webcam_images/${selectedSession}/${analysis.imagePath} 800w`}\r\n//                     sizes=\"(max-width: 400px) 200px, (max-width: 800px) 400px, 800px\"\r\n//                     alt={`Webcam ${index}`} \r\n//                     style={{ width: '100%', height: 'auto', borderRadius: '5px' }}\r\n//                     loading=\"lazy\" \r\n//                   />\r\n//                 </td>\r\n                \r\n//                 <td style={{ border: '1px solid #ddd', padding: '12px', textAlign: 'center' }}>\r\n//                   <img \r\n//                     src={`http://localhost:5000/uploads/game_screenshots/${selectedSession}/screenshot_${index}.png`} \r\n//                     srcSet={`http://localhost:5000/uploads/game_screenshots/${selectedSession}/small/screenshot_${index}.png 200w,\r\n//                              http://localhost:5000/uploads/game_screenshots/${selectedSession}/medium/screenshot_${index}.png 400w,\r\n//                              http://localhost:5000/uploads/game_screenshots/${selectedSession}/screenshot_${index}.png 800w`}\r\n//                     sizes=\"(max-width: 400px) 200px, (max-width: 800px) 400px, 800px\"\r\n//                     alt={`Game Screenshot ${index}`} \r\n//                     style={{ width: '100%', height: 'auto', borderRadius: '5px' }}\r\n//                     loading=\"lazy\" \r\n//                   />\r\n//                 </td>\r\n\r\n//                 <td style={{ border: '1px solid #ddd', padding: '12px' }}>\r\n//                   {Object.entries(analysis.emotions).map(([emotion, value]) => (\r\n//                     <p key={emotion} style={{ margin: '5px 0' }}>{emotion}: {parseFloat(value).toFixed(2)}%</p>\r\n//                   ))}\r\n//                 </td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const renderPieChart = () => {\r\n//     if (!analysisData || !analysisData.overallAnalysis) return null;\r\n\r\n//     const emotions = analysisData.overallAnalysis.emotions;\r\n//     const data = {\r\n//       labels: Object.keys(emotions),\r\n//       datasets: [{\r\n//         label: 'Emotion Analysis (%)',\r\n//         data: Object.values(emotions).map(v => parseFloat(v)),\r\n//         backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', '#FF9F40'],\r\n//       }]\r\n//     };\r\n\r\n//     const options = {\r\n//       responsive: true,\r\n//       plugins: {\r\n//         legend: {\r\n//           position: 'top',\r\n//         },\r\n//       },\r\n//     };\r\n\r\n//     return (\r\n//       <div style={{ width: '60%', margin: '0 auto' }}>\r\n//         <h3 style={{ textAlign: 'center' }}>Overall Emotion Analysis</h3>\r\n//         <Pie data={data} options={options} />\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div style={{ padding: '20px', maxHeight: '100vh', overflowY: 'auto' }}> {/* Added maxHeight and overflowY */}\r\n//       <h2>Admin Dashboard</h2>\r\n      \r\n//       {/* Pie Chart for Overall Emotion Analysis */}\r\n//       {renderPieChart()}\r\n\r\n//       <div style={{ display: 'flex', marginTop: '40px' }}>\r\n//         {selectedSession ? (\r\n//           <div style={{ width: '100%' }}>\r\n//             <h3>Analysis for Session: {selectedSession}</h3>\r\n//             {renderTable()}\r\n            \r\n//             {/* Back to Sessions Button */}\r\n//             <button \r\n//               onClick={handleBackToSessions} \r\n//               style={{\r\n//                 backgroundColor: '#A2C2E2', // Pastel blue color\r\n//                 color: '#fff',\r\n//                 padding: '10px 15px',\r\n//                 border: 'none',\r\n//                 borderRadius: '5px',\r\n//                 cursor: 'pointer',\r\n//                 marginTop: '20px',\r\n//                 display: 'block',\r\n//                 marginLeft: 'auto',\r\n//                 marginRight: 'auto'\r\n//               }}\r\n//             >\r\n//               Back to Sessions\r\n//             </button>\r\n//           </div>\r\n//         ) : (\r\n//           <div style={{ width: '30%', marginRight: '20px' }}>\r\n//             <h3>Sessions</h3>\r\n//             <ul style={{ listStyleType: 'none', padding: 0 }}>\r\n//               {sessions.map((session) => (\r\n//                 <li \r\n//                   key={session} \r\n//                   onClick={() => handleSessionClick(session)}\r\n//                   style={{ cursor: 'pointer', padding: '10px', border: '1px solid #ddd', marginBottom: '5px' }}\r\n//                 >\r\n//                   {session}\r\n//                 </li>\r\n//               ))}\r\n//             </ul>\r\n//           </div>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AdminApp;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}