{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dravya\\\\Expression Tracker(Leela)\\\\Expression_Tracker\\\\client\\\\src\\\\components\\\\GameComponent.jsx\",\n  _s = $RefreshSig$();\n// src/components/GameComponent.jsx\nimport React, { useState, useEffect } from 'react';\nimport './GameComponent.css';\nimport ImageCapture from './ImageCaptureComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shapes = ['circle', 'square', 'triangle'];\n\n// Function to shuffle an array\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\nfunction App() {\n  _s();\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [score, setScore] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [isCorrect, setIsCorrect] = useState(null);\n  const [shuffledOptions, setShuffledOptions] = useState([]);\n  const [streak, setStreak] = useState(0);\n  const [isGameActive, setIsGameActive] = useState(true);\n  const [sessionId, setSessionId] = useState(null);\n  const startSession = async () => {\n    console.log(\"Entered Start Session\");\n    try {\n      console.log(\"Entered Try\");\n      const response = await fetch('http://localhost:5000/start-session');\n      console.log(\"fetching\");\n      const data = await response.json();\n      setSessionId(data.sessionId);\n      console.log(\"Fetched sessionId:\", data.sessionId);\n    } catch (error) {\n      console.error('Error creating session:', error);\n    }\n  };\n  useEffect(() => {\n    startSession();\n  }, []);\n\n  // Monitoring sessionId to ensure it gets set correctly\n  useEffect(() => {\n    if (sessionId === null) {\n      console.warn(\"sessionId is still null after fetching.\");\n    } else {\n      console.log(\"sessionId set successfully:\", sessionId);\n    }\n  }, [sessionId]);\n  useEffect(() => {\n    const newQuestions = Array(5).fill(null).map(() => {\n      const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\n      const randomCount = Math.floor(Math.random() * 5) + 1;\n      const sequence = Array(randomCount).fill(randomShape).concat(Array(9 - randomCount).fill(null).map(() => shapes[Math.floor(Math.random() * shapes.length)]));\n      const correctAnswer = sequence.filter(s => s === randomShape).length;\n      let options = [correctAnswer];\n      while (options.length < 4) {\n        const randomOption = Math.floor(Math.random() * 5) + 1;\n        if (!options.includes(randomOption)) {\n          options.push(randomOption);\n        }\n      }\n      return {\n        shape: randomShape,\n        sequence,\n        correctAnswer,\n        options: shuffleArray([...options])\n      };\n    });\n    setQuestions(newQuestions);\n  }, []);\n  useEffect(() => {\n    if (questions.length > 0 && currentQuestion < questions.length) {\n      const {\n        options\n      } = questions[currentQuestion];\n      setShuffledOptions(options);\n    }\n  }, [currentQuestion, questions]);\n  const handleAnswer = answer => {\n    if (!isAnswered) {\n      setSelectedAnswer(answer);\n      setIsAnswered(true);\n      const correctAnswer = questions[currentQuestion].correctAnswer;\n      const correct = answer === correctAnswer;\n      setIsCorrect(correct);\n      if (correct) {\n        setScore(score + 1);\n        setStreak(streak + 1); // Increment streak for correct answers\n      } else {\n        setStreak(0); // Reset streak on wrong answer\n      }\n    }\n  };\n  const nextQuestion = () => {\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n    setIsCorrect(null);\n    if (currentQuestion < questions.length - 1) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setIsGameActive(false); // Set game as inactive when finished\n      setCurrentQuestion(questions.length);\n    }\n  };\n  const restartGame = async () => {\n    await startSession(); // Start a new session when the game restarts\n    setScore(0);\n    setCurrentQuestion(0);\n    setSelectedAnswer(null);\n    setIsAnswered(false);\n    setIsCorrect(null);\n    setStreak(0);\n    setIsGameActive(true);\n  };\n\n  // Function to return the appropriate emoji based on the answer and streak\n  const getSmiley = () => {\n    if (!isAnswered) {\n      return '😊'; // Neutral smiley before answering\n    }\n    if (isCorrect) {\n      return streak > 1 ? '😁' : '😃'; // Happiest for streak, happy for single correct\n    } else {\n      return '😢'; // Sad for wrong answer\n    }\n  };\n\n  // Render ImageCapture component only when game is active and sessionId is set\n  const renderImageCapture = () => {\n    if (isGameActive) {\n      if (sessionId) {\n        return /*#__PURE__*/_jsxDEV(ImageCapture, {\n          sessionId: sessionId,\n          isActive: isGameActive\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading session...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 16\n        }, this);\n      }\n    }\n    return null;\n  };\n  if (currentQuestion >= questions.length) {\n    let congratulateMessage = '';\n\n    // Define the different messages based on the score\n    switch (score) {\n      case 5:\n        congratulateMessage = 'Amazing! You got all 5 answers right! 🎉';\n        break;\n      case 4:\n        congratulateMessage = 'Great job! You scored 4 out of 5! 😄';\n        break;\n      case 3:\n        congratulateMessage = 'Nice! You scored 3 out of 5! 👍';\n        break;\n      case 2:\n        congratulateMessage = 'Good effort! You scored 2 out of 5! Keep practicing! 😊';\n        break;\n      case 1:\n        congratulateMessage = 'Nice try! You scored 1 out of 5! Don’t give up! 💪';\n        break;\n      default:\n        congratulateMessage = 'Don’t give up! Try again, you can do better! 💪';\n        break;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"game-title\",\n        children: \"Shape Counting Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"result\",\n          children: [\"Your score: \", score, \" / \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"full-screen-message\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"congratulate-message\",\n            children: congratulateMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"restart-btn\",\n          onClick: restartGame,\n          \"aria-label\": \"Play Again\",\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this);\n  }\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 38\n  }, this);\n  const {\n    shape,\n    sequence,\n    options\n  } = questions[currentQuestion];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [renderImageCapture(), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"game-title\",\n      children: \"Shape Counting Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"How many \", /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"target-shape\",\n          children: [shape, \"s\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 22\n        }, this), \" are in the sequence?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"shape-sequence\",\n        children: sequence.map((s, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `shape ${s} ${isCorrect === false ? 'sad' : ''}`,\n          \"aria-label\": `A ${s}`,\n          children: s && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"smiley\",\n            children: getSmiley()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 21\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"options-container\",\n        children: shuffledOptions.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"option-btn\",\n          onClick: () => handleAnswer(option),\n          disabled: isAnswered,\n          \"aria-label\": `Select ${option}`,\n          children: option\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), selectedAnswer !== null && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"result\",\n          children: isCorrect ? 'Correct!' : `Wrong! The correct answer was ${questions[currentQuestion].correctAnswer}.`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"next-btn\",\n          onClick: nextQuestion,\n          \"aria-label\": \"Next Question\",\n          children: \"Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"ZB/BEoeW5X++E5qT7ZjW5E4OPN4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","ImageCapture","jsxDEV","_jsxDEV","shapes","shuffleArray","array","i","length","j","Math","floor","random","App","_s","currentQuestion","setCurrentQuestion","selectedAnswer","setSelectedAnswer","score","setScore","questions","setQuestions","isAnswered","setIsAnswered","isCorrect","setIsCorrect","shuffledOptions","setShuffledOptions","streak","setStreak","isGameActive","setIsGameActive","sessionId","setSessionId","startSession","console","log","response","fetch","data","json","error","warn","newQuestions","Array","fill","map","randomShape","randomCount","sequence","concat","correctAnswer","filter","s","options","randomOption","includes","push","shape","handleAnswer","answer","correct","nextQuestion","restartGame","getSmiley","renderImageCapture","isActive","fileName","_jsxFileName","lineNumber","columnNumber","children","congratulateMessage","className","onClick","index","option","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Dravya/Expression Tracker(Leela)/Expression_Tracker/client/src/components/GameComponent.jsx"],"sourcesContent":["// src/components/GameComponent.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport './GameComponent.css';\r\nimport ImageCapture from './ImageCaptureComponent';\r\n\r\nconst shapes = ['circle', 'square', 'triangle'];\r\n\r\n// Function to shuffle an array\r\nfunction shuffleArray(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n  return array;\r\n}\r\n\r\nfunction App() {\r\n  const [currentQuestion, setCurrentQuestion] = useState(0);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [isAnswered, setIsAnswered] = useState(false);\r\n  const [isCorrect, setIsCorrect] = useState(null);\r\n  const [shuffledOptions, setShuffledOptions] = useState([]);\r\n  const [streak, setStreak] = useState(0);\r\n  const [isGameActive, setIsGameActive] = useState(true);\r\n  const [sessionId, setSessionId] = useState(null);\r\n\r\n  const startSession = async () => {\r\n    console.log(\"Entered Start Session\");\r\n    try {\r\n      console.log(\"Entered Try\");\r\n      const response = await fetch('http://localhost:5000/start-session');\r\n      console.log(\"fetching\");\r\n      const data = await response.json();\r\n      setSessionId(data.sessionId);\r\n      console.log(\"Fetched sessionId:\", data.sessionId);\r\n    } catch (error) {\r\n      console.error('Error creating session:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    startSession();\r\n  }, []);\r\n\r\n  // Monitoring sessionId to ensure it gets set correctly\r\n  useEffect(() => {\r\n    if (sessionId === null) {\r\n      console.warn(\"sessionId is still null after fetching.\");\r\n    } else {\r\n      console.log(\"sessionId set successfully:\", sessionId);\r\n    }\r\n  }, [sessionId]);\r\n\r\n  useEffect(() => {\r\n    const newQuestions = Array(5)\r\n      .fill(null)\r\n      .map(() => {\r\n        const randomShape = shapes[Math.floor(Math.random() * shapes.length)];\r\n        const randomCount = Math.floor(Math.random() * 5) + 1;\r\n        const sequence = Array(randomCount)\r\n          .fill(randomShape)\r\n          .concat(\r\n            Array(9 - randomCount).fill(null).map(() => shapes[Math.floor(Math.random() * shapes.length)]),\r\n          );\r\n\r\n        const correctAnswer = sequence.filter((s) => s === randomShape).length;\r\n\r\n        let options = [correctAnswer];\r\n        while (options.length < 4) {\r\n          const randomOption = Math.floor(Math.random() * 5) + 1;\r\n          if (!options.includes(randomOption)) {\r\n            options.push(randomOption);\r\n          }\r\n        }\r\n\r\n        return {\r\n          shape: randomShape,\r\n          sequence,\r\n          correctAnswer,\r\n          options: shuffleArray([...options])\r\n        };\r\n      });\r\n    setQuestions(newQuestions);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (questions.length > 0 && currentQuestion < questions.length) {\r\n      const { options } = questions[currentQuestion];\r\n      setShuffledOptions(options);\r\n    }\r\n  }, [currentQuestion, questions]);\r\n\r\n  const handleAnswer = (answer) => {\r\n    if (!isAnswered) {\r\n      setSelectedAnswer(answer);\r\n      setIsAnswered(true);\r\n\r\n      const correctAnswer = questions[currentQuestion].correctAnswer;\r\n      const correct = answer === correctAnswer;\r\n      setIsCorrect(correct);\r\n\r\n      if (correct) {\r\n        setScore(score + 1);\r\n        setStreak(streak + 1); // Increment streak for correct answers\r\n      } else {\r\n        setStreak(0); // Reset streak on wrong answer\r\n      }\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    setSelectedAnswer(null);\r\n    setIsAnswered(false);\r\n    setIsCorrect(null);\r\n    if (currentQuestion < questions.length - 1) {\r\n      setCurrentQuestion(currentQuestion + 1);\r\n    } else {\r\n      setIsGameActive(false); // Set game as inactive when finished\r\n      setCurrentQuestion(questions.length);\r\n    }\r\n  };\r\n\r\n  const restartGame = async () => {\r\n    await startSession(); // Start a new session when the game restarts\r\n    setScore(0);\r\n    setCurrentQuestion(0);\r\n    setSelectedAnswer(null);\r\n    setIsAnswered(false);\r\n    setIsCorrect(null);\r\n    setStreak(0);\r\n    setIsGameActive(true);\r\n  };\r\n\r\n  // Function to return the appropriate emoji based on the answer and streak\r\n  const getSmiley = () => {\r\n    if (!isAnswered) {\r\n      return '😊'; // Neutral smiley before answering\r\n    }\r\n    if (isCorrect) {\r\n      return streak > 1 ? '😁' : '😃'; // Happiest for streak, happy for single correct\r\n    } else {\r\n      return '😢'; // Sad for wrong answer\r\n    }\r\n  };\r\n\r\n  // Render ImageCapture component only when game is active and sessionId is set\r\n  const renderImageCapture = () => {\r\n    if (isGameActive) {\r\n      if (sessionId) {\r\n        return <ImageCapture sessionId={sessionId} isActive={isGameActive} />;\r\n      } else {\r\n        return <div>Loading session...</div>;\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  if (currentQuestion >= questions.length) {\r\n    let congratulateMessage = '';\r\n  \r\n    // Define the different messages based on the score\r\n    switch(score) {\r\n      case 5:\r\n        congratulateMessage = 'Amazing! You got all 5 answers right! 🎉';\r\n        break;\r\n      case 4:\r\n        congratulateMessage = 'Great job! You scored 4 out of 5! 😄';\r\n        break;\r\n      case 3:\r\n        congratulateMessage = 'Nice! You scored 3 out of 5! 👍';\r\n        break;\r\n      case 2:\r\n        congratulateMessage = 'Good effort! You scored 2 out of 5! Keep practicing! 😊';\r\n        break;\r\n      case 1:\r\n        congratulateMessage = 'Nice try! You scored 1 out of 5! Don’t give up! 💪';\r\n        break;\r\n      default:\r\n        congratulateMessage = 'Don’t give up! Try again, you can do better! 💪';\r\n        break;\r\n    }\r\n    return (\r\n      <div className=\"app\">\r\n        <h1 className=\"game-title\">Shape Counting Game</h1>\r\n        <div className=\"game-container\">\r\n          <p className=\"result\">Your score: {score} / {questions.length}</p>\r\n          <div className=\"full-screen-message\">\r\n            <p className=\"congratulate-message\">{congratulateMessage}</p>\r\n          </div>\r\n          <button\r\n            className=\"restart-btn\"\r\n            onClick={restartGame}\r\n            aria-label=\"Play Again\"\r\n          >\r\n            Play Again\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (questions.length === 0) return <div>Loading...</div>;\r\n\r\n  const { shape, sequence, options } = questions[currentQuestion];\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      {renderImageCapture()}\r\n      <h1 className=\"game-title\">Shape Counting Game</h1>\r\n      <div className=\"game-container\">\r\n        <h3>How many <span className=\"target-shape\">{shape}s</span> are in the sequence?</h3>\r\n        <div className=\"shape-sequence\">\r\n          {sequence.map((s, index) => (\r\n            <div \r\n              key={index} \r\n              className={`shape ${s} ${isCorrect === false ? 'sad' : ''}`} \r\n              aria-label={`A ${s}`}\r\n            >\r\n              {s && <span className=\"smiley\">{getSmiley()}</span>}\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"options-container\">\r\n          {shuffledOptions.map((option, index) => (\r\n            <button\r\n              key={index}\r\n              className=\"option-btn\"\r\n              onClick={() => handleAnswer(option)}\r\n              disabled={isAnswered}\r\n              aria-label={`Select ${option}`}\r\n            >\r\n              {option}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        {selectedAnswer !== null && (\r\n          <div>\r\n            <p className=\"result\">\r\n              {isCorrect ? 'Correct!' : `Wrong! The correct answer was ${questions[currentQuestion].correctAnswer}.`}\r\n            </p>\r\n            <button\r\n              className=\"next-btn\"\r\n              onClick={nextQuestion}\r\n              aria-label=\"Next Question\"\r\n            >\r\n              Next Question\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}