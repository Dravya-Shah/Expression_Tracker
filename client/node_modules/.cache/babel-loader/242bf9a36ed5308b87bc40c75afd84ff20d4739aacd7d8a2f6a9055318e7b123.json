{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from '../services/api.js'; // Assuming your API utility\n\nconst ImageCapture = ({\n  sessionId,\n  isActive\n}) => {\n  _s();\n  const [screenshot, setScreenshot] = useState(null);\n  const [webcamImage, setWebcamImage] = useState(null);\n  const videoRef = useRef(null);\n  const capturingRef = useRef(false);\n  const streamRef = useRef(null);\n\n  // Function to capture a screenshot\n  const captureScreenshot = async () => {\n    try {\n      const canvas = await html2canvas(document.body); // Capture the current view\n      canvas.toBlob(blob => {\n        const file = new File([blob], 'screenshot.png', {\n          type: 'image/png'\n        });\n        setScreenshot(file);\n      }, 'image/png');\n    } catch (error) {\n      console.error('Error capturing screenshot:', error);\n    }\n  };\n\n  // Function to capture webcam image\n  const captureWebcamImage = () => {\n    if (videoRef.current) {\n      const canvas = document.createElement('canvas');\n      canvas.width = videoRef.current.videoWidth;\n      canvas.height = videoRef.current.videoHeight;\n      const ctx = canvas.getContext('2d');\n      ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n      canvas.toBlob(blob => {\n        const file = new File([blob], 'webcam.png', {\n          type: 'image/png'\n        });\n        setWebcamImage(file);\n      }, 'image/png');\n    }\n  };\n\n  // Single capture handler to avoid multiple triggers\n  const captureImages = () => {\n    if (!capturingRef.current && isActive) {\n      capturingRef.current = true;\n      captureScreenshot();\n      captureWebcamImage();\n      setTimeout(() => {\n        capturingRef.current = false;\n      }, 1000);\n    }\n  };\n\n  // Upload images when both are ready\n  //   useEffect(() => {\n  //     const upload = async () => {\n  //       if (screenshot && webcamImage && sessionId) {\n  //         try {\n  //           await uploadImages(screenshot, webcamImage, sessionId);\n  //           console.log('Images uploaded successfully');\n  //           setScreenshot(null);\n  //           setWebcamImage(null);\n  //         } catch (error) {\n  //           console.error('Error uploading images:', error);\n  //         }\n  //       }\n  //     };\n  //     upload();\n  //   }, [screenshot, webcamImage, sessionId]);\n\n  // Start/stop webcam based on isActive prop\n  useEffect(() => {\n    const startWebcam = async () => {\n      if (isActive) {\n        try {\n          const stream = await navigator.mediaDevices.getUserMedia({\n            video: true\n          });\n          streamRef.current = stream;\n          if (videoRef.current) {\n            videoRef.current.srcObject = stream;\n          }\n        } catch (error) {\n          console.error('Error accessing webcam:', error);\n        }\n      }\n    };\n    const stopWebcam = () => {\n      if (streamRef.current) {\n        const tracks = streamRef.current.getTracks();\n        tracks.forEach(track => track.stop());\n        streamRef.current = null;\n        if (videoRef.current) {\n          videoRef.current.srcObject = null;\n        }\n      }\n    };\n    if (isActive) {\n      startWebcam();\n    } else {\n      stopWebcam();\n    }\n    return () => {\n      stopWebcam();\n    };\n  }, [isActive]);\n\n  // Periodically capture images\n  useEffect(() => {\n    let intervalId;\n    if (isActive) {\n      intervalId = setInterval(() => {\n        captureImages();\n      }, 5000); // Adjust interval as needed\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [isActive]);\n  return;\n  //   (\n  //     <div>\n  //       <video ref={videoRef} autoPlay style={{ display: 'none' }} crossOrigin=\"anonymous\" />\n  //     </div>\n  //   );\n};\n_s(ImageCapture, \"I1fzWbZY7s5uJAva8yqbLvEvWxs=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","useRef","html2canvas","uploadImages","ImageCapture","sessionId","isActive","_s","screenshot","setScreenshot","webcamImage","setWebcamImage","videoRef","capturingRef","streamRef","captureScreenshot","canvas","document","body","toBlob","blob","file","File","type","error","console","captureWebcamImage","current","createElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","captureImages","setTimeout","startWebcam","stream","navigator","mediaDevices","getUserMedia","video","srcObject","stopWebcam","tracks","getTracks","forEach","track","stop","intervalId","setInterval","clearInterval","_c","$RefreshReg$"],"sources":["C:/Users/Dravya/Expression Tracker(Leela)/Expression_Tracker/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from '../services/api.js'; // Assuming your API utility\r\n\r\nconst ImageCapture = ({ sessionId, isActive }) => {\r\n  const [screenshot, setScreenshot] = useState(null);\r\n  const [webcamImage, setWebcamImage] = useState(null);\r\n  const videoRef = useRef(null);\r\n  const capturingRef = useRef(false);\r\n  const streamRef = useRef(null);\r\n\r\n  // Function to capture a screenshot\r\n  const captureScreenshot = async () => {\r\n    try {\r\n      const canvas = await html2canvas(document.body); // Capture the current view\r\n      canvas.toBlob((blob) => {\r\n        const file = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n        setScreenshot(file);\r\n      }, 'image/png');\r\n    } catch (error) {\r\n      console.error('Error capturing screenshot:', error);\r\n    }\r\n  };\r\n\r\n  // Function to capture webcam image\r\n  const captureWebcamImage = () => {\r\n    if (videoRef.current) {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = videoRef.current.videoWidth;\r\n      canvas.height = videoRef.current.videoHeight;\r\n      const ctx = canvas.getContext('2d');\r\n      ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n      canvas.toBlob((blob) => {\r\n        const file = new File([blob], 'webcam.png', { type: 'image/png' });\r\n        setWebcamImage(file);\r\n      }, 'image/png');\r\n    }\r\n  };\r\n\r\n  // Single capture handler to avoid multiple triggers\r\n  const captureImages = () => {\r\n    if (!capturingRef.current && isActive) {\r\n      capturingRef.current = true;\r\n      captureScreenshot();\r\n      captureWebcamImage();\r\n      setTimeout(() => {\r\n        capturingRef.current = false;\r\n      }, 1000);\r\n    }\r\n  };\r\n\r\n  // Upload images when both are ready\r\n//   useEffect(() => {\r\n//     const upload = async () => {\r\n//       if (screenshot && webcamImage && sessionId) {\r\n//         try {\r\n//           await uploadImages(screenshot, webcamImage, sessionId);\r\n//           console.log('Images uploaded successfully');\r\n//           setScreenshot(null);\r\n//           setWebcamImage(null);\r\n//         } catch (error) {\r\n//           console.error('Error uploading images:', error);\r\n//         }\r\n//       }\r\n//     };\r\n//     upload();\r\n//   }, [screenshot, webcamImage, sessionId]);\r\n\r\n  // Start/stop webcam based on isActive prop\r\n  useEffect(() => {\r\n    const startWebcam = async () => {\r\n      if (isActive) {\r\n        try {\r\n          const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n          streamRef.current = stream;\r\n          if (videoRef.current) {\r\n            videoRef.current.srcObject = stream;\r\n          }\r\n        } catch (error) {\r\n          console.error('Error accessing webcam:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    const stopWebcam = () => {\r\n      if (streamRef.current) {\r\n        const tracks = streamRef.current.getTracks();\r\n        tracks.forEach((track) => track.stop());\r\n        streamRef.current = null;\r\n        if (videoRef.current) {\r\n          videoRef.current.srcObject = null;\r\n        }\r\n      }\r\n    };\r\n\r\n    if (isActive) {\r\n      startWebcam();\r\n    } else {\r\n      stopWebcam();\r\n    }\r\n\r\n    return () => {\r\n      stopWebcam();\r\n    };\r\n  }, [isActive]);\r\n\r\n  // Periodically capture images\r\n  useEffect(() => {\r\n    let intervalId;\r\n\r\n    if (isActive) {\r\n      intervalId = setInterval(() => {\r\n        captureImages();\r\n      }, 5000); // Adjust interval as needed\r\n    }\r\n\r\n    return () => {\r\n      if (intervalId) {\r\n        clearInterval(intervalId);\r\n      }\r\n    };\r\n  }, [isActive]);\r\n\r\n  return \r\n//   (\r\n//     <div>\r\n//       <video ref={videoRef} autoPlay style={{ display: 'none' }} crossOrigin=\"anonymous\" />\r\n//     </div>\r\n//   );\r\n};\r\n\r\nexport default ImageCapture;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,WAAW,MAAM,aAAa;AACrC,SAASC,YAAY,QAAQ,oBAAoB,CAAC,CAAC;;AAEnD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAMY,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMY,YAAY,GAAGZ,MAAM,CAAC,KAAK,CAAC;EAClC,MAAMa,SAAS,GAAGb,MAAM,CAAC,IAAI,CAAC;;EAE9B;EACA,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,MAAM,GAAG,MAAMd,WAAW,CAACe,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC;MACjDF,MAAM,CAACG,MAAM,CAAEC,IAAI,IAAK;QACtB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,IAAI,CAAC,EAAE,gBAAgB,EAAE;UAAEG,IAAI,EAAE;QAAY,CAAC,CAAC;QACtEd,aAAa,CAACY,IAAI,CAAC;MACrB,CAAC,EAAE,WAAW,CAAC;IACjB,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;;EAED;EACA,MAAME,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,IAAId,QAAQ,CAACe,OAAO,EAAE;MACpB,MAAMX,MAAM,GAAGC,QAAQ,CAACW,aAAa,CAAC,QAAQ,CAAC;MAC/CZ,MAAM,CAACa,KAAK,GAAGjB,QAAQ,CAACe,OAAO,CAACG,UAAU;MAC1Cd,MAAM,CAACe,MAAM,GAAGnB,QAAQ,CAACe,OAAO,CAACK,WAAW;MAC5C,MAAMC,GAAG,GAAGjB,MAAM,CAACkB,UAAU,CAAC,IAAI,CAAC;MACnCD,GAAG,CAACE,SAAS,CAACvB,QAAQ,CAACe,OAAO,EAAE,CAAC,EAAE,CAAC,EAAEX,MAAM,CAACa,KAAK,EAAEb,MAAM,CAACe,MAAM,CAAC;MAClEf,MAAM,CAACG,MAAM,CAAEC,IAAI,IAAK;QACtB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACF,IAAI,CAAC,EAAE,YAAY,EAAE;UAAEG,IAAI,EAAE;QAAY,CAAC,CAAC;QAClEZ,cAAc,CAACU,IAAI,CAAC;MACtB,CAAC,EAAE,WAAW,CAAC;IACjB;EACF,CAAC;;EAED;EACA,MAAMe,aAAa,GAAGA,CAAA,KAAM;IAC1B,IAAI,CAACvB,YAAY,CAACc,OAAO,IAAIrB,QAAQ,EAAE;MACrCO,YAAY,CAACc,OAAO,GAAG,IAAI;MAC3BZ,iBAAiB,CAAC,CAAC;MACnBW,kBAAkB,CAAC,CAAC;MACpBW,UAAU,CAAC,MAAM;QACfxB,YAAY,CAACc,OAAO,GAAG,KAAK;MAC9B,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;;EAED;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEE;EACA5B,SAAS,CAAC,MAAM;IACd,MAAMuC,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAIhC,QAAQ,EAAE;QACZ,IAAI;UACF,MAAMiC,MAAM,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;YAAEC,KAAK,EAAE;UAAK,CAAC,CAAC;UACzE7B,SAAS,CAACa,OAAO,GAAGY,MAAM;UAC1B,IAAI3B,QAAQ,CAACe,OAAO,EAAE;YACpBf,QAAQ,CAACe,OAAO,CAACiB,SAAS,GAAGL,MAAM;UACrC;QACF,CAAC,CAAC,OAAOf,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD;MACF;IACF,CAAC;IAED,MAAMqB,UAAU,GAAGA,CAAA,KAAM;MACvB,IAAI/B,SAAS,CAACa,OAAO,EAAE;QACrB,MAAMmB,MAAM,GAAGhC,SAAS,CAACa,OAAO,CAACoB,SAAS,CAAC,CAAC;QAC5CD,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAKA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC;QACvCpC,SAAS,CAACa,OAAO,GAAG,IAAI;QACxB,IAAIf,QAAQ,CAACe,OAAO,EAAE;UACpBf,QAAQ,CAACe,OAAO,CAACiB,SAAS,GAAG,IAAI;QACnC;MACF;IACF,CAAC;IAED,IAAItC,QAAQ,EAAE;MACZgC,WAAW,CAAC,CAAC;IACf,CAAC,MAAM;MACLO,UAAU,CAAC,CAAC;IACd;IAEA,OAAO,MAAM;MACXA,UAAU,CAAC,CAAC;IACd,CAAC;EACH,CAAC,EAAE,CAACvC,QAAQ,CAAC,CAAC;;EAEd;EACAP,SAAS,CAAC,MAAM;IACd,IAAIoD,UAAU;IAEd,IAAI7C,QAAQ,EAAE;MACZ6C,UAAU,GAAGC,WAAW,CAAC,MAAM;QAC7BhB,aAAa,CAAC,CAAC;MACjB,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACZ;IAEA,OAAO,MAAM;MACX,IAAIe,UAAU,EAAE;QACdE,aAAa,CAACF,UAAU,CAAC;MAC3B;IACF,CAAC;EACH,CAAC,EAAE,CAAC7C,QAAQ,CAAC,CAAC;EAEd;EACF;EACA;EACA;EACA;EACA;AACA,CAAC;AAACC,EAAA,CA7HIH,YAAY;AAAAkD,EAAA,GAAZlD,YAAY;AA+HlB,eAAeA,YAAY;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}