{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dravya\\\\Expression Tracker(Leela)\\\\Expression_Tracker\\\\client\\\\src\\\\components\\\\ImageCaptureComponent.jsx\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState, useRef } from 'react';\n// import html2canvas from 'html2canvas';\n// import { uploadImages } from '../services/api.js';\n\n// const ImageCapture = ({ sessionId, isActive }) => {\n//     const [screenshot, setScreenshot] = useState(null);\n//     const [webcamImage, setWebcamImage] = useState(null);\n//     const videoRef = useRef(null);\n//     const capturingRef = useRef(false);\n//     const[sessionId,setSessionId]=useState(null);\n//     const streamRef = useRef(null);\n\n//     // Function to capture a screenshot\n//     const captureScreenshot = async () => {\n//         const canvas = await html2canvas(document.body);\n//         canvas.toBlob(blob => {\n//             const file = new File([blob], 'screenshot.png', { type: 'image/png' });\n//             setScreenshot(file);\n//         }, 'image/png');\n//     };\n\n//     // Function to capture webcam image\n//     const captureWebcamImage = () => {\n//         if (videoRef.current) {\n//             const canvas = document.createElement('canvas');\n//             canvas.width = videoRef.current.videoWidth;\n//             canvas.height = videoRef.current.videoHeight;\n//             const ctx = canvas.getContext('2d');\n//             ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n//             canvas.toBlob(blob => {\n//                 const file = new File([blob], 'webcam.png', { type: 'image/png' });\n//                 setWebcamImage(file);\n//             }, 'image/png');\n//         }\n//     };\n\n//     // Single capture handler to avoid multiple triggers\n//     const captureImages = () => {\n//         if (!capturingRef.current && isActive) {\n//             capturingRef.current = true;\n//             captureScreenshot();\n//             captureWebcamImage();\n//             setTimeout(() => {\n//                 capturingRef.current = false;\n//             }, 1000);\n//         }\n//     };\n\n//     // Upload images when both are ready\n//     useEffect(() => {\n//         const upload = async () => {\n//             if (screenshot && webcamImage && sessionId && isActive) {\n//                 try {\n//                     await uploadImages(screenshot, webcamImage, sessionId);\n//                     console.log('Images uploaded successfully');\n//                     setScreenshot(null);\n//                     setWebcamImage(null);\n//                 } catch (error) {\n//                     console.error('Error uploading images:', error);\n//                 }\n//             }\n//         };\n//         upload();\n//     }, [screenshot, webcamImage, sessionId, isActive]);\n\n//     // Start/stop webcam based on isActive prop\n//     useEffect(() => {\n//         const startWebcam = async () => {\n//             if (isActive) {\n//                 try {\n//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true });\n//                     streamRef.current = stream;\n//                     if (videoRef.current) {\n//                         videoRef.current.srcObject = stream;\n//                     }\n//                 } catch (error) {\n//                     console.error('Error accessing webcam:', error);\n//                 }\n//             }\n//         };\n\n//         const stopWebcam = () => {\n//             if (streamRef.current) {\n//                 const tracks = streamRef.current.getTracks();\n//                 tracks.forEach(track => track.stop());\n//                 streamRef.current = null;\n//                 if (videoRef.current) {\n//                     videoRef.current.srcObject = null;\n//                 }\n//             }\n//         };\n\n//         if (isActive) {\n//             startWebcam();\n//         } else {\n//             stopWebcam();\n//         }\n\n//         return () => {\n//             stopWebcam();\n//         };\n//     }, [isActive]);\n\n//     // Set up/clear interval based on isActive prop\n//     useEffect(() => {\n//         let intervalId;\n\n//         if (isActive) {\n//             intervalId = setInterval(() => {\n//                 captureImages();\n//             }, 5000);\n//         }\n\n//         return () => {\n//             if (intervalId) {\n//                 clearInterval(intervalId);\n//             }\n//         };\n//     }, [isActive]);\n\n//     return (\n//         <div>\n//             <video ref={videoRef} autoPlay style={{ display: 'none' }} />\n//         </div>\n//     );\n// };\n\n// export default ImageCapture;\n\n// ImageCaptureComponent.jsx\nimport React, { useEffect, useState, useRef } from 'react';\nimport html2canvas from 'html2canvas';\nimport { uploadImages } from '../services/api.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ImageCapture = ({\n  sessionId,\n  isActive\n}) => {\n  _s();\n  const [screenshot, setScreenshot] = useState(null);\n  const [webcamImage, setWebcamImage] = useState(null);\n  const videoRef = useRef(null);\n  const capturingRef = useRef(false);\n  const streamRef = useRef(null);\n\n  // Function to capture a screenshot\n  const captureScreenshot = async () => {\n    try {\n      const canvas = await html2canvas(document.body);\n      const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\n      const file = new File([blob], 'screenshot.png', {\n        type: 'image/png'\n      });\n      setScreenshot(file);\n    } catch (error) {\n      console.error('Error capturing screenshot:', error);\n    }\n  };\n\n  // Function to capture webcam image\n  const captureWebcamImage = () => {\n    if (videoRef.current && videoRef.current.readyState === 4) {\n      const canvas = document.createElement('canvas');\n      canvas.width = videoRef.current.videoWidth;\n      canvas.height = videoRef.current.videoHeight;\n      const ctx = canvas.getContext('2d');\n      try {\n        ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\n        canvas.toBlob(blob => {\n          const file = new File([blob], 'webcam.png', {\n            type: 'image/png'\n          });\n          setWebcamImage(file);\n        }, 'image/png');\n      } catch (error) {\n        console.error('Error capturing webcam:', error);\n      }\n    }\n  };\n\n  // Single capture handler\n  const captureImages = () => {\n    if (!capturingRef.current && isActive && sessionId) {\n      capturingRef.current = true;\n      captureScreenshot();\n      captureWebcamImage();\n      setTimeout(() => {\n        capturingRef.current = false;\n      }, 1000);\n    }\n  };\n\n  // Upload images when both are ready\n  useEffect(() => {\n    const upload = async () => {\n      if (screenshot && webcamImage && sessionId && isActive) {\n        try {\n          await uploadImages(screenshot, webcamImage, sessionId);\n          console.log('Images uploaded successfully');\n          setScreenshot(null);\n          setWebcamImage(null);\n        } catch (error) {\n          console.error('Error uploading images:', error);\n        }\n      }\n    };\n    upload();\n  }, [screenshot, webcamImage, sessionId, isActive]);\n\n  // Start/stop webcam\n  useEffect(() => {\n    const startWebcam = async () => {\n      if (isActive) {\n        try {\n          const constraints = {\n            video: {\n              width: {\n                ideal: 1280\n              },\n              height: {\n                ideal: 720\n              }\n            }\n          };\n          const stream = await navigator.mediaDevices.getUserMedia(constraints);\n          streamRef.current = stream;\n          if (videoRef.current) {\n            videoRef.current.srcObject = stream;\n            await videoRef.current.play();\n          }\n        } catch (error) {\n          console.error('Error accessing webcam:', error);\n        }\n      }\n    };\n    const stopWebcam = () => {\n      if (streamRef.current) {\n        streamRef.current.getTracks().forEach(track => track.stop());\n        streamRef.current = null;\n        if (videoRef.current) {\n          videoRef.current.srcObject = null;\n        }\n      }\n    };\n    if (isActive) {\n      startWebcam();\n    } else {\n      stopWebcam();\n    }\n    return () => {\n      stopWebcam();\n    };\n  }, [isActive]);\n\n  // Set up/clear interval\n  useEffect(() => {\n    let intervalId;\n    if (isActive && sessionId) {\n      intervalId = setInterval(captureImages, 5000);\n    }\n    return () => {\n      if (intervalId) {\n        clearInterval(intervalId);\n      }\n    };\n  }, [isActive, sessionId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"image-capture\",\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      style: {\n        display: 'none'\n      },\n      crossOrigin: \"anonymous\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 263,\n    columnNumber: 9\n  }, this);\n};\n_s(ImageCapture, \"6Yy867jqhwSN5yhovxr/6M733Lg=\");\n_c = ImageCapture;\nexport default ImageCapture;\nvar _c;\n$RefreshReg$(_c, \"ImageCapture\");","map":{"version":3,"names":["React","useEffect","useState","useRef","html2canvas","uploadImages","jsxDEV","_jsxDEV","ImageCapture","sessionId","isActive","_s","screenshot","setScreenshot","webcamImage","setWebcamImage","videoRef","capturingRef","streamRef","captureScreenshot","canvas","document","body","blob","Promise","resolve","toBlob","file","File","type","error","console","captureWebcamImage","current","readyState","createElement","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","captureImages","setTimeout","upload","log","startWebcam","constraints","video","ideal","stream","navigator","mediaDevices","getUserMedia","srcObject","play","stopWebcam","getTracks","forEach","track","stop","intervalId","setInterval","clearInterval","className","children","ref","autoPlay","playsInline","style","display","crossOrigin","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dravya/Expression Tracker(Leela)/Expression_Tracker/client/src/components/ImageCaptureComponent.jsx"],"sourcesContent":["// import React, { useEffect, useState, useRef } from 'react';\r\n// import html2canvas from 'html2canvas';\r\n// import { uploadImages } from '../services/api.js';\r\n\r\n// const ImageCapture = ({ sessionId, isActive }) => {\r\n//     const [screenshot, setScreenshot] = useState(null);\r\n//     const [webcamImage, setWebcamImage] = useState(null);\r\n//     const videoRef = useRef(null);\r\n//     const capturingRef = useRef(false);\r\n//     const[sessionId,setSessionId]=useState(null);\r\n//     const streamRef = useRef(null);\r\n\r\n//     // Function to capture a screenshot\r\n//     const captureScreenshot = async () => {\r\n//         const canvas = await html2canvas(document.body);\r\n//         canvas.toBlob(blob => {\r\n//             const file = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n//             setScreenshot(file);\r\n//         }, 'image/png');\r\n//     };\r\n\r\n//     // Function to capture webcam image\r\n//     const captureWebcamImage = () => {\r\n//         if (videoRef.current) {\r\n//             const canvas = document.createElement('canvas');\r\n//             canvas.width = videoRef.current.videoWidth;\r\n//             canvas.height = videoRef.current.videoHeight;\r\n//             const ctx = canvas.getContext('2d');\r\n//             ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n//             canvas.toBlob(blob => {\r\n//                 const file = new File([blob], 'webcam.png', { type: 'image/png' });\r\n//                 setWebcamImage(file);\r\n//             }, 'image/png');\r\n//         }\r\n//     };\r\n\r\n//     // Single capture handler to avoid multiple triggers\r\n//     const captureImages = () => {\r\n//         if (!capturingRef.current && isActive) {\r\n//             capturingRef.current = true;\r\n//             captureScreenshot();\r\n//             captureWebcamImage();\r\n//             setTimeout(() => {\r\n//                 capturingRef.current = false;\r\n//             }, 1000);\r\n//         }\r\n//     };\r\n\r\n//     // Upload images when both are ready\r\n//     useEffect(() => {\r\n//         const upload = async () => {\r\n//             if (screenshot && webcamImage && sessionId && isActive) {\r\n//                 try {\r\n//                     await uploadImages(screenshot, webcamImage, sessionId);\r\n//                     console.log('Images uploaded successfully');\r\n//                     setScreenshot(null);\r\n//                     setWebcamImage(null);\r\n//                 } catch (error) {\r\n//                     console.error('Error uploading images:', error);\r\n//                 }\r\n//             }\r\n//         };\r\n//         upload();\r\n//     }, [screenshot, webcamImage, sessionId, isActive]);\r\n\r\n//     // Start/stop webcam based on isActive prop\r\n//     useEffect(() => {\r\n//         const startWebcam = async () => {\r\n//             if (isActive) {\r\n//                 try {\r\n//                     const stream = await navigator.mediaDevices.getUserMedia({ video: true });\r\n//                     streamRef.current = stream;\r\n//                     if (videoRef.current) {\r\n//                         videoRef.current.srcObject = stream;\r\n//                     }\r\n//                 } catch (error) {\r\n//                     console.error('Error accessing webcam:', error);\r\n//                 }\r\n//             }\r\n//         };\r\n\r\n//         const stopWebcam = () => {\r\n//             if (streamRef.current) {\r\n//                 const tracks = streamRef.current.getTracks();\r\n//                 tracks.forEach(track => track.stop());\r\n//                 streamRef.current = null;\r\n//                 if (videoRef.current) {\r\n//                     videoRef.current.srcObject = null;\r\n//                 }\r\n//             }\r\n//         };\r\n\r\n//         if (isActive) {\r\n//             startWebcam();\r\n//         } else {\r\n//             stopWebcam();\r\n//         }\r\n\r\n//         return () => {\r\n//             stopWebcam();\r\n//         };\r\n//     }, [isActive]);\r\n\r\n//     // Set up/clear interval based on isActive prop\r\n//     useEffect(() => {\r\n//         let intervalId;\r\n        \r\n//         if (isActive) {\r\n//             intervalId = setInterval(() => {\r\n//                 captureImages();\r\n//             }, 5000);\r\n//         }\r\n\r\n//         return () => {\r\n//             if (intervalId) {\r\n//                 clearInterval(intervalId);\r\n//             }\r\n//         };\r\n//     }, [isActive]);\r\n\r\n//     return (\r\n//         <div>\r\n//             <video ref={videoRef} autoPlay style={{ display: 'none' }} />\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default ImageCapture;\r\n\r\n// ImageCaptureComponent.jsx\r\nimport React, { useEffect, useState, useRef } from 'react';\r\nimport html2canvas from 'html2canvas';\r\nimport { uploadImages } from '../services/api.js';\r\n\r\nconst ImageCapture = ({ sessionId, isActive }) => {\r\n    const [screenshot, setScreenshot] = useState(null);\r\n    const [webcamImage, setWebcamImage] = useState(null);\r\n    const videoRef = useRef(null);\r\n    const capturingRef = useRef(false);\r\n    const streamRef = useRef(null);\r\n\r\n    // Function to capture a screenshot\r\n    const captureScreenshot = async () => {\r\n        try {\r\n            const canvas = await html2canvas(document.body);\r\n            const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));\r\n            const file = new File([blob], 'screenshot.png', { type: 'image/png' });\r\n            setScreenshot(file);\r\n        } catch (error) {\r\n            console.error('Error capturing screenshot:', error);\r\n        }\r\n    };\r\n\r\n    // Function to capture webcam image\r\n    const captureWebcamImage = () => {\r\n        if (videoRef.current && videoRef.current.readyState === 4) {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = videoRef.current.videoWidth;\r\n            canvas.height = videoRef.current.videoHeight;\r\n            const ctx = canvas.getContext('2d');\r\n            \r\n            try {\r\n                ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);\r\n                canvas.toBlob(blob => {\r\n                    const file = new File([blob], 'webcam.png', { type: 'image/png' });\r\n                    setWebcamImage(file);\r\n                }, 'image/png');\r\n            } catch (error) {\r\n                console.error('Error capturing webcam:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Single capture handler\r\n    const captureImages = () => {\r\n        if (!capturingRef.current && isActive && sessionId) {\r\n            capturingRef.current = true;\r\n            captureScreenshot();\r\n            captureWebcamImage();\r\n            setTimeout(() => {\r\n                capturingRef.current = false;\r\n            }, 1000);\r\n        }\r\n    };\r\n\r\n    // Upload images when both are ready\r\n    useEffect(() => {\r\n        const upload = async () => {\r\n            if (screenshot && webcamImage && sessionId && isActive) {\r\n                try {\r\n                    await uploadImages(screenshot, webcamImage, sessionId);\r\n                    console.log('Images uploaded successfully');\r\n                    setScreenshot(null);\r\n                    setWebcamImage(null);\r\n                } catch (error) {\r\n                    console.error('Error uploading images:', error);\r\n                }\r\n            }\r\n        };\r\n        upload();\r\n    }, [screenshot, webcamImage, sessionId, isActive]);\r\n\r\n    // Start/stop webcam\r\n    useEffect(() => {\r\n        const startWebcam = async () => {\r\n            if (isActive) {\r\n                try {\r\n                    const constraints = {\r\n                        video: {\r\n                            width: { ideal: 1280 },\r\n                            height: { ideal: 720 }\r\n                        }\r\n                    };\r\n                    const stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n                    streamRef.current = stream;\r\n                    if (videoRef.current) {\r\n                        videoRef.current.srcObject = stream;\r\n                        await videoRef.current.play();\r\n                    }\r\n                } catch (error) {\r\n                    console.error('Error accessing webcam:', error);\r\n                }\r\n            }\r\n        };\r\n\r\n        const stopWebcam = () => {\r\n            if (streamRef.current) {\r\n                streamRef.current.getTracks().forEach(track => track.stop());\r\n                streamRef.current = null;\r\n                if (videoRef.current) {\r\n                    videoRef.current.srcObject = null;\r\n                }\r\n            }\r\n        };\r\n\r\n        if (isActive) {\r\n            startWebcam();\r\n        } else {\r\n            stopWebcam();\r\n        }\r\n\r\n        return () => {\r\n            stopWebcam();\r\n        };\r\n    }, [isActive]);\r\n\r\n    // Set up/clear interval\r\n    useEffect(() => {\r\n        let intervalId;\r\n        \r\n        if (isActive && sessionId) {\r\n            intervalId = setInterval(captureImages, 5000);\r\n        }\r\n\r\n        return () => {\r\n            if (intervalId) {\r\n                clearInterval(intervalId);\r\n            }\r\n        };\r\n    }, [isActive, sessionId]);\r\n\r\n    return (\r\n        <div className=\"image-capture\">\r\n            <video \r\n                ref={videoRef} \r\n                autoPlay \r\n                playsInline\r\n                style={{ display: 'none' }}\r\n                crossOrigin=\"anonymous\"\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageCapture;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}